CIM Coding Exercise: 

curl -i -X POST -H "Content-Type: application/json" -d "{ \"partner_id\": \"1\", \"duration\": 1,\"ad_content\":\"3\" }" http://localhost:8080/ad

curl -i -X POST -H "Content-Type: application/json" -d "{ \"partner_id\": \"2\", \"duration\": 120,\"ad_content\":\"3\" }" http://localhost:8080/ad

curl -X POST http://192.168.0.103:8080/ad/2

curl -i -X POST -H "Content-Type: application/json" -d "{ \"partner_id\": \"1\", \"duration\": 1,\"ad_content\":\"3\" }" http://localhost:8080/multiple/ad
curl -X GET http://192.168.0.103:8080/list

..................................



This doc contains requirements for a coding exercise that involves building a simple HTTP-based ad server.



Simple Ad Server
-------------------------------------

Overview
--------



You will be building a simple web application that allows a user to create ad campaigns.
 You should demonstrate that your code meets the functional requirements described below via unit and integration tests. 
 There should be instructions for deploying and running the application, ideally expressed via code/configuration and not prose.

Use the language with which you feel most comfortable.



Share your project via a Git repository in GitHub. 

Be prepared to walk through your code, discuss your thought process, and talk through 
how you might monitor and scale this application. You should also be able to demo a running instance of the host.



Functional Requirements
-----------------------


== Create Ad Campaign via HTTP POST

 
A user should be able to create an ad campaign by sending a POST request to the ad server at
 http://<host>/ad.  The body of the POST request must be a JSON object containing the following data:

{
 "partner_id": "unique_string_representing_partner',
 "duration": "int_representing_campaign_duration_in_seconds_from_now"
 "ad_content": "string_of_content_to_display_as_ad"
}

The server should enforce the following invariant upon receiving a request to create a new campaign.

* Only one active campaign can exist for a given partner.

If an error is encountered, the ad server must return an appropriate response and indicate the problem to the user.  
The response format is left up to the discretion of the implementer.

Storing campaign data in memory or a cookie is totally fine.
 


== Fetch Ad Campaign for a Partner


A partner should be able to get their ad data by sending a GET request to the ad server at http://<host>/ad/<partner_id>.  
Response can be delivered as a JSON object representing the active ad

If the current time is greater than a campaign's creation time + duration, then the server's response should be an error 
indicating that no active ad campaigns exist for the specified partner.

Bonus
-----

The following are not required but might be nice additions to the exercise.

* Describe a fault tolerant deployment topology for your application, and the types of failures it would and would not be resilient to.
	A. Fault tolerance is the property that enables a system to continue operating properly in the event of the failure of (or one or more faults within) 
	some of its components. If its operating quality decreases at all, the decrease is proportional to the severity of the failure, 
	as compared to a naively designed system in which even a small failure can cause total breakdown.
	Fault tolerance is particularly sought after in high-availability or life-critical systems. The ability of maintaining functionality 
	when portions of a system break down is referred to as graceful degradation.
	Memory related resilient occur in my application due to inbuilt memory of java.
* Discuss the advantages and disadvantages of your persistence mechanism.
   Advantage :My persistent mechanism provide quick response due to in built meomory of the application.
   Disadvantage: Permgenspace error will occur if user keep on adds the data to the application.
* Add a URL to return a list of all campaigns as JSON.
	http://localhost:8080/list
* Add support for multiple ad campaigns per partner.
    http://localhost:8080/multiple/ad
   